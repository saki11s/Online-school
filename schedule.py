from telebot import types
import re
import modules.database as db
import config

ADMIN_STATE_AWAITING_SCHEDULE_TEXT = 5

def get_manage_schedule_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_update_schedule = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å/–ó–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_schedule_update")
    btn_delete_schedule = types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_schedule_delete_confirm")
    btn_back_to_admin = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main")
    markup.add(btn_update_schedule, btn_delete_schedule, btn_back_to_admin)
    return markup

def show_manage_schedule_panel(bot, chat_id, message_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text="üóìÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º**\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.",
        reply_markup=get_manage_schedule_menu(),
        parse_mode="Markdown"
    )

def start_schedule_update_flow(bot, chat_id, admin_states):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    template = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–π —à–∞–±–ª–æ–Ω:**\n"
        "```\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
        "10:00 - –ü—Ä–µ–¥–º–µ—Ç 1\n\n"
        "–í—Ç–æ—Ä–Ω–∏–∫:\n"
        "11:00 - –ü—Ä–µ–¥–º–µ—Ç 2\n"
        "...\n"
        "```\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞:**\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º.\n"
        "2. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞."
    )
    bot.send_message(chat_id, template, parse_mode="Markdown")
    admin_states[chat_id] = ADMIN_STATE_AWAITING_SCHEDULE_TEXT

def process_schedule_update(message, bot, admin_states):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    """
    new_schedule_text = message.text
    
    old_schedule_text = db.get_schedule()

    old_schedule_dict = parse_schedule_to_dict(old_schedule_text)
    new_schedule_dict = parse_schedule_to_dict(new_schedule_text)

    changed_days = []
    all_days = sorted(list(set(old_schedule_dict.keys()) | set(new_schedule_dict.keys())), key=lambda x: ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"].index(x))

    for day in all_days:
        old_day_schedule = old_schedule_dict.get(day, "").strip()
        new_day_schedule = new_schedule_dict.get(day, "").strip()

        if old_day_schedule != new_day_schedule:
            changed_days.append(day)

    if db.update_schedule(new_schedule_text):
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        notify_all_users_about_schedule_update(bot, changed_days, is_major_update=(not old_schedule_text))
    else:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    
    admin_states[message.chat.id] = 0

def parse_schedule_to_dict(full_text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å."""
    if not full_text:
        return {}
    
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    schedule_dict = {}
    
    pattern = re.compile(r'^\s*(' + '|'.join(days) + '):', re.MULTILINE | re.IGNORECASE)
    
    matches = list(pattern.finditer(full_text))
    
    if not matches:
        return {}

    for i, match in enumerate(matches):
        day_name = match.group(1).capitalize()
        start_pos = match.end()
        
        end_pos = matches[i+1].start() if i + 1 < len(matches) else len(full_text)
        
        schedule_content = full_text[start_pos:end_pos].strip()
        schedule_dict[day_name] = schedule_content

    return schedule_dict

def parse_schedule_for_day(full_text, day_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏–∑ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è."""
    if not full_text:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ."
    
    schedule_by_days = parse_schedule_to_dict(full_text)
    
    schedule_for_day = schedule_by_days.get(day_name)
    
    if schedule_for_day:
        return schedule_for_day
    else:
        return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

def notify_all_users_about_schedule_update(bot, changed_days, is_major_update=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ù–ï-–∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    
    if not changed_days and not is_major_update:
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
        return

    all_user_ids = db.get_all_user_ids()
    if not all_user_ids:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return
        
    notification_text = ""
    if is_major_update:
        notification_text = "üîî **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!**"
    elif len(changed_days) > 3:
        notification_text = "üîî **–í–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!**"
    else:
        days_str = "\n- ".join(changed_days)
        notification_text = f"üîî **–í–Ω–∏–º–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!**\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏:\n- {days_str}"

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_view_schedule = types.InlineKeyboardButton("üóìÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_week")
    markup.add(btn_view_schedule)

    for user_id in all_user_ids:
        try:
            bot.send_message(
                user_id,
                notification_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")