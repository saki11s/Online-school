from telebot import types
import re
import modules.database as db

ADMIN_STATE_AWAITING_SCHEDULE_TEXT = 5

def get_manage_schedule_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_update_schedule = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å/–ó–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_schedule_update")
    btn_back_to_admin = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main")
    markup.add(btn_update_schedule, btn_back_to_admin)
    return markup

def show_manage_schedule_panel(bot, chat_id, message_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text="üóìÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º**\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.",
        reply_markup=get_manage_schedule_menu(),
        parse_mode="Markdown"
    )

def start_schedule_update_flow(bot, chat_id, admin_states):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    template = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–π —à–∞–±–ª–æ–Ω:**\n"
        "```\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
        "10:00 - –ü—Ä–µ–¥–º–µ—Ç 1\n\n"
        "–í—Ç–æ—Ä–Ω–∏–∫:\n"
        "11:00 - –ü—Ä–µ–¥–º–µ—Ç 2\n"
        "...\n"
        "```\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞:**\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º.\n"
        "2. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏."
    )
    bot.send_message(chat_id, template, parse_mode="Markdown")
    admin_states[chat_id] = ADMIN_STATE_AWAITING_SCHEDULE_TEXT

def process_schedule_update(message, bot, admin_states):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    schedule_text = message.text
    if db.update_schedule(schedule_text):
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    
    admin_states[message.chat.id] = 0

def parse_schedule_for_day(full_text, day_name):
    """–ò—â–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    if not full_text:
        return None
        
    pattern = re.compile(f"^{re.escape(day_name)}:(.*?)(?=\n\n\w+:|$)", re.DOTALL | re.MULTILINE)
    match = pattern.search(full_text)
    
    if match:
        schedule_for_day = match.group(1).strip()
        return schedule_for_day if schedule_for_day else "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."