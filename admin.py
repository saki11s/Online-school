from telebot import types
from telebot.apihelper import ApiTelegramException
import config
import modules.database as db
import modules.support as support_module

ADMIN_STATE_NONE = 0
ADMIN_STATE_MANAGE_REQUESTS = 1
ADMIN_STATE_AWAITING_ANSWER_TEXT = 2
ADMIN_STATE_AWAITING_FAQ_QUESTION = 3
ADMIN_STATE_AWAITING_FAQ_ANSWER = 4

admin_states = {}
admin_current_request_id = {}
admin_current_faq_question = {}
admin_current_message_to_edit = {}

def is_admin(user_id):
    return user_id in config.ADMIN_IDS

def get_admin_main_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_manage_requests = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¢–ü", callback_data="admin_manage_requests")
    btn_manage_faq = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ", callback_data="admin_manage_faq")
    btn_manage_schedule = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="admin_manage_schedule")
    btn_back_to_main = types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)", callback_data="back_to_main")
    markup.add(btn_manage_requests, btn_manage_faq, btn_manage_schedule, btn_back_to_main)
    return markup

def show_admin_panel(bot, chat_id, message_id, user_id):
    if not is_admin(user_id):
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_main_menu(),
            parse_mode="Markdown"
        )
    except:
        bot.send_message(chat_id, "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_main_menu(), parse_mode="Markdown")

    admin_states[chat_id] = ADMIN_STATE_NONE

def get_manage_requests_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_view_new = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="admin_view_new_requests")
    btn_view_all = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="admin_view_all_requests")
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main")
    markup.add(btn_view_new, btn_view_all, btn_back)
    return markup

def show_requests_list(message, bot, is_new_requests=False):
    chat_id = message.chat.id
    
    if is_new_requests:
        requests = db.get_new_support_requests()
        title = "üÜï **–ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
    else:
        requests = db.get_all_support_requests()
        title = "üìä **–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É:**\n"

    if not requests:
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞–º–∏", callback_data="admin_manage_requests")
        markup.add(btn_back)
        bot.send_message(chat_id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç {'–Ω–æ–≤—ã—Ö' if is_new_requests else ''} –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=markup)
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for req_id, user_id, username, full_name, description, status, created_at in requests:
        short_desc = description[:50] + "..." if len(description) > 50 else description
        button_text = f"#{req_id} | {full_name} ({status}): {short_desc}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"admin_view_request_details_{req_id}"))
    
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞–º–∏", callback_data="admin_manage_requests"))
    
    bot.send_message(chat_id, title + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup, parse_mode="Markdown")
    admin_states[chat_id] = ADMIN_STATE_MANAGE_REQUESTS

def show_request_details_for_admin(bot, chat_id, message_id, request_id):
    request_data = db.get_support_request_by_id(request_id)

    if not request_data:
        bot.send_message(chat_id, f"–ó–∞–ø—Ä–æ—Å —Å ID #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    req_id, user_id, username, full_name, description, status, created_at = request_data

    history = db.get_messages_for_request(req_id)
    history_text = "\n\n**üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n"
    if history:
        for sender_name, sender_type, msg_text, msg_time in history:
            sender_prefix = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if sender_type == 'user' else "‚öôÔ∏è –ê–¥–º–∏–Ω"
            history_text += f"_{msg_time.strftime('%d.%m %H:%M')}_ | **{sender_prefix} ({sender_name})**:\n{msg_text}\n\n"
    else:
        history_text += "_–ü–µ—Ä–µ–ø–∏—Å–∫–∏ –µ—â–µ –Ω–µ—Ç._"


    details_text = (
        f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ #{req_id}**\n\n"
        f"**–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {full_name} (@{username if username else '–Ω–µ—Ç'}) (ID: `{user_id}`)\n"
        f"**–î–∞—Ç–∞/–í—Ä–µ–º—è:** {created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"**–°—Ç–∞—Ç—É—Å:** `{status}`"
        f"{history_text}"
    )

    markup = types.InlineKeyboardMarkup(row_width=2)
    
    if status == '–û—Ç–∫—Ä—ã—Ç':
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_change_status_–ò–∑—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É_{req_id}"))
    elif status == '–ò–∑—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É':
        markup.add(types.InlineKeyboardButton("‚úÖ –†–µ—à–∏—Ç—å (–†–µ—à–µ–Ω)", callback_data=f"admin_change_status_–†–µ—à–µ–Ω_{req_id}"))
    
    markup.add(types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_start_answer_{req_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="admin_manage_requests"))
    
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=details_text,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    except Exception:
        bot.send_message(chat_id, details_text, reply_markup=markup, parse_mode="Markdown")

    admin_states[chat_id] = ADMIN_STATE_MANAGE_REQUESTS
    admin_current_message_to_edit[chat_id] = message_id

def start_answer_flow_from_details(message, bot, request_id):
    chat_id = message.chat.id
    admin_current_request_id[chat_id] = request_id
    admin_current_message_to_edit[chat_id] = message.message_id
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    admin_states[chat_id] = ADMIN_STATE_AWAITING_ANSWER_TEXT

def process_admin_answer(message, bot):
    chat_id = message.chat.id
    admin_id = message.from_user.id
    admin_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    request_id = admin_current_request_id.get(chat_id)
    answer_text = message.text
    message_id_to_edit = admin_current_message_to_edit.get(chat_id)

    if not request_id or not message_id_to_edit:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø—Ä–æ—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        admin_states[chat_id] = ADMIN_STATE_NONE
        return

    request_data = db.get_support_request_by_id(request_id)
    if not request_data:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        admin_states[chat_id] = ADMIN_STATE_NONE
        return

    _, user_requester_id, _, _, _, current_status, _ = request_data

    user_markup = types.InlineKeyboardMarkup(row_width=1)
    btn_resolve = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞", callback_data=f"user_resolve_request_{request_id}")
    btn_reply = types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data=f"user_reply_to_request_{request_id}")
    user_markup.add(btn_resolve, btn_reply)

    try:
        bot.send_message(
            user_requester_id,
            f"üì¢ **–û—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É #{request_id} –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n"
            f"{answer_text}",
            parse_mode="Markdown",
            reply_markup=user_markup
        )
        bot.send_message(chat_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        db.add_support_message(request_id, admin_id, admin_name, 'admin', answer_text)

        if current_status == '–û—Ç–∫—Ä—ã—Ç':
            db.update_support_request_status(request_id, "–ò–∑—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É", admin_id)
            bot.send_message(chat_id, f"–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{request_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **'–ò–∑—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É'**.", parse_mode="Markdown")
            bot.send_message(
                user_requester_id,
                f"üîî **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É #{request_id}:**\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: **`–ò–∑—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É`**",
                parse_mode="Markdown"
            )

    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_requester_id}): {e}")

    admin_states[chat_id] = ADMIN_STATE_NONE
    if chat_id in admin_current_request_id:
        del admin_current_request_id[chat_id]
    
    show_request_details_for_admin(bot, chat_id, message_id_to_edit, request_id)

    if chat_id in admin_current_message_to_edit:
        del admin_current_message_to_edit[chat_id]

def change_request_status(bot, call_id, chat_id, message_id_to_edit, request_id, new_status, admin_id):
    if db.update_support_request_status(request_id, new_status, admin_id):
        bot.answer_callback_query(call_id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        
        request_data = db.get_support_request_by_id(request_id)
        if request_data:
            user_requester_id = request_data[1]
            bot.send_message(
                user_requester_id,
                f"üîî **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É #{request_id}:**\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: **`{new_status}`**"
                f"{' (–í–∞—à –∑–∞–ø—Ä–æ—Å —Ä–µ—à–µ–Ω)' if new_status == '–†–µ—à–µ–Ω' else ''}",
                parse_mode="Markdown"
            )
        
        show_request_details_for_admin(bot, chat_id, message_id_to_edit, request_id)
        return True
    else:
        bot.answer_callback_query(call_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        return False

def get_manage_faq_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_add_faq = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq")
    btn_view_faq = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å FAQ", callback_data="support_faq_from_admin")
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_main")
    markup.add(btn_add_faq, btn_view_faq, btn_back)
    return markup

def start_add_faq_flow(message, bot):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ FAQ:")
    admin_states[message.chat.id] = ADMIN_STATE_AWAITING_FAQ_QUESTION

def process_faq_question(message, bot):
    question = message.text
    admin_current_faq_question[message.chat.id] = question
    bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: `{question}`\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:", parse_mode="Markdown")
    admin_states[message.chat.id] = ADMIN_STATE_AWAITING_FAQ_ANSWER

def process_faq_answer(message, bot):
    chat_id = message.chat.id
    answer = message.text
    question = admin_current_faq_question.get(chat_id)

    if not question:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        admin_states[chat_id] = ADMIN_STATE_NONE
        if chat_id in admin_current_faq_question: del admin_current_faq_question[chat_id]
        return
    
    conn = db.get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("INSERT INTO faq (question, answer) VALUES (%s, %s);", (question, answer))
            conn.commit()
            bot.send_message(chat_id, "–ù–æ–≤—ã–π FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ: {e}")
            conn.rollback()
        finally:
            cur.close()
            conn.close()

    admin_states[chat_id] = ADMIN_STATE_NONE
    if chat_id in admin_current_faq_question: del admin_current_faq_question[chat_id]
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_manage_faq_menu())