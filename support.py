from telebot import types
import modules.database as db
import config
import modules.faq_matcher as faq_matcher

SUPPORT_STATE_NONE = 0
SUPPORT_STATE_AWAITING_DESCRIPTION = 1
SUPPORT_STATE_AWAITING_REPLY = 2

user_support_states = {}
user_replying_to_request_id = {}

def get_support_menu():
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_faq = types.InlineKeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)", callback_data="support_faq")
    btn_create_request = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="support_create_request")
    btn_check_status = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞", callback_data="support_check_status")
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    markup.add(btn_faq, btn_create_request, btn_check_status, btn_back)
    return markup

def start_create_request_flow(message, bot):
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è, —è —Å–æ–∑–¥–∞–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    user_support_states[message.chat.id] = SUPPORT_STATE_AWAITING_DESCRIPTION

def process_support_description(message, bot):
    user_id = message.chat.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}".strip()
    description = message.text

    all_faq_items = db.get_all_faq_items()
    
    best_match = faq_matcher.find_best_faq_match(description, all_faq_items)
    
    if best_match:
        faq_question, faq_answer = best_match
        bot.send_message(
            user_id,
            f"üí° **–ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–º FAQ:**\n\n"
            f"**–í–æ–ø—Ä–æ—Å:** {faq_question}\n"
            f"**–û—Ç–≤–µ—Ç:** {faq_answer}",
            parse_mode="Markdown"
        )
        bot.send_message(user_id, "–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ! –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.", reply_markup=get_support_menu())
        user_support_states[user_id] = SUPPORT_STATE_NONE
        return

    request_id = db.add_support_request(user_id, username, full_name, description)

    if request_id:
        db.add_support_message(request_id, user_id, full_name, 'user', description)
        bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å #{request_id} –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        notify_admins_new_request(bot, request_id, user_id, full_name, description)
    else:
        bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    user_support_states[user_id] = SUPPORT_STATE_NONE
    bot.send_message(user_id, "–ß—Ç–æ –µ—â–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_support_menu())


def show_faq(message, bot):
    faq_items = db.get_all_faq_items()
    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="back_to_support_menu")
    markup.add(btn_back)
    
    if not faq_items:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=markup)
        return

    faq_text = "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n\n"
    for i, (question, answer) in enumerate(faq_items):
        faq_text += f"**{i+1}. {question}**\n"
        faq_text += f"{answer}\n\n"

    bot.send_message(message.chat.id, faq_text, parse_mode="Markdown", reply_markup=markup)

def show_user_requests(message, bot):
    user_id = message.chat.id
    requests = db.get_user_support_requests(user_id)
    
    markup = types.InlineKeyboardMarkup()
    
    if not requests:
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="back_to_support_menu")
        markup.add(btn_back)
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=markup)
        return

    requests_text = "–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n"
    for req_id, desc, status, created_at in requests:
        requests_text += (
            f"**–ó–∞–ø—Ä–æ—Å #{req_id}** (–æ—Ç {created_at.strftime('%d.%m.%Y %H:%M')})\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc[:100]}...\n"
            f"–°—Ç–∞—Ç—É—Å: `{status}`\n\n"
        )
    
    btn_clear = types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–æ—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="user_confirm_delete_my_requests")
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="back_to_support_menu")
    markup.add(btn_clear, btn_back)
    
    bot.send_message(user_id, requests_text, parse_mode="Markdown", reply_markup=markup)

def notify_admins_new_request(bot, request_id, user_id, user_full_name, description):
    markup = types.InlineKeyboardMarkup()
    btn_details = types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"admin_view_request_details_{request_id}")
    markup.add(btn_details)
    
    for admin_id in config.ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"üö® **–ù–û–í–´–ô –ó–ê–ü–†–û–° –í –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–£!** üö®\n\n"
                f"**ID –∑–∞–ø—Ä–æ—Å–∞:** #{request_id}\n"
                f"**–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {user_full_name} (ID: `{user_id}`)\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}",
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

def start_reply_flow(message, bot, request_id):
    chat_id = message.chat.id
    user_support_states[chat_id] = SUPPORT_STATE_AWAITING_REPLY
    user_replying_to_request_id[chat_id] = request_id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:")

def process_user_reply(message, bot):
    user_id = message.chat.id
    request_id = user_replying_to_request_id.get(user_id)
    user_full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    reply_text = message.text
    
    if not request_id:
        return

    db.add_support_message(request_id, user_id, user_full_name, 'user', reply_text)

    for admin_id in config.ADMIN_IDS:
        try:
            markup = types.InlineKeyboardMarkup()
            btn_details = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø—Ä–æ—Å—É", callback_data=f"admin_view_request_details_{request_id}")
            markup.add(btn_details)
            bot.send_message(
                admin_id,
                f"üí¨ **–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–ø—Ä–æ—Å—É #{request_id}**\n\n"
                f"**–û—Ç:** {user_full_name} (ID: `{user_id}`)\n"
                f"**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{reply_text}",
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    bot.send_message(user_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    user_support_states[user_id] = SUPPORT_STATE_NONE
    if user_id in user_replying_to_request_id:
        del user_replying_to_request_id[user_id]

def notify_admin_of_status_change(bot, request_id, new_status, user_full_name):
    for admin_id in config.ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_full_name}** –∑–∞–∫—Ä—ã–ª –∑–∞–ø—Ä–æ—Å **#{request_id}**.\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: **{new_status}**",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id} –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
